<?xml version="1.0" encoding="UTF-8"?>
<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec" run-as="external"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:djb="http://www.obdurodon.org"
    stylesheet="blithedale-to-graph.xsl">
    <!-- ================================================================== -->
    <!-- Thanks to Amanda Galtman                                           -->
    <!-- https://github.com/galtm/xspectacles/issues/62#issuecomment-2646385567 -->
    <!-- ================================================================== -->

    <!-- ================================================================== -->
    <!-- Import helper function                                             -->
    <!-- ================================================================== -->
    <x:helper stylesheet="blithedale-to-graph-helper.xsl"/>

    <!-- ================================================================== -->
    <!-- Test scenarios                                                     -->
    <!-- ================================================================== -->
    <x:scenario label="Scenarios for testing function count-words">
        <x:call function="djb:count-words"/>
        <x:scenario label="with whitespace-normalized input">
            <x:call>
                <x:param name="strings"
                    select="tokenize('This is a sample text'), tokenize('And this is another')"/>
            </x:call>
            <x:expect label="Should tokenize and count words" select="9"/>
        </x:scenario>
        <x:scenario label="with input that has edge spaces">
            <x:call>
                <x:param name="strings"
                    select="tokenize('This is a sample text '), tokenize(' And this is another')"/>
            </x:call>
            <x:expect label="Should tokenize and count words" select="9"/>
        </x:scenario>
    </x:scenario>

    <x:scenario label="Scenario for testing function chapter-offset-to-x-pos">
        <x:param name="chapter-total-word-counts" as="map(*)" select="map {1: 10, 2:12, 3:15}"/>
        <x:param name="total-word-count" as="xs:integer" select="37"/>
        <x:param name="x-scale" select="2"/>
        <x:call function="djb:chapter-offset-to-x-pos">
            <x:param name="chapter-offset" select="2"/>
        </x:call>
        <x:variable name="expected-result" select="(10 + 12) * 100 * 2 div 37"/>
        <x:variable name="tolerance" select="0.0001"/>
        <x:expect label="Should be accurate within 0.0001"
            test="djb:compare-with-tolerance($expected-result, $x:result, $tolerance)"
            select="map{'result': 'Success'}"/>
    </x:scenario>

    <x:scenario label="Scenarios for testing function word-parent-codes">
        <x:call function="djb:word-parent-codes"/>
        <x:scenario label="with space characters at edges">
            <x:variable name="test-text" as="element(doc)"><doc><paragraph><q>Mr. Coverdale,</q>
                        said he softly, <q>can I speak with you a
                moment?</q></paragraph></doc></x:variable>
            <x:call>
                <x:param name="input" select="$test-text/descendant::text()"/>
            </x:call>
            <x:expect label="Sequence of 1 (paragraph) and 0 (q) values"
                select="0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0"/>
        </x:scenario>
        <x:scenario label="with whitespace between quotations">
            <x:variable name="test-text" as="element(doc)"><doc><paragraph><q>If thou shrinkest from
                            this, there is yet another way.</q>
                        <q>And what is that?</q> asked Theodore.</paragraph></doc></x:variable>
            <x:call>
                <x:param name="input" select="$test-text/descendant::text()"/>
            </x:call>
            <x:expect label="Sequence of 1 (paragraph) and 0 (q) values" select="0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1"/>
        </x:scenario>
        <x:scenario label="with em-dashes at edges">
            <x:variable name="test-text" as="element(doc)"><doc><paragraph>For instance:—<q>Which
                            man among you,</q> quoth he, <q>is the best judge of
                        swine?</q></paragraph></doc></x:variable>
            <x:call>
                <x:param name="input" select="$test-text/descendant::text()"/>
            </x:call>
            <x:expect label="Sequence of 1 (paragraph) and 0 (a) values"
                select="1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0"/>
        </x:scenario>
    </x:scenario>

    <x:scenario label="Scenarios for testing function tokenize-text-node">
        <x:call function="djb:tokenize-text-node"/>
        <x:scenario label="with space characters at edges">
            <x:call>
                <x:param name="input" as="text()"> said he softly, </x:param>
            </x:call>
            <x:expect label="Sequence of three tokens" select="'said', 'he', 'softly,'"/>
        </x:scenario>
        <x:scenario label="with em-dashes at edges">
            <x:call>
                <x:param name="input" as="text()">For instance:—</x:param>
            </x:call>
            <x:expect label="Sequence of two tokens, with no em-dash" select="'For', 'instance:'"/>
        </x:scenario>
    </x:scenario>
</x:description>
